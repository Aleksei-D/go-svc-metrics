// Code generated by MockGen. DO NOT EDIT.
// Source: metric.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "go-svc-metrics/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricRepo is a mock of MetricRepo interface.
type MockMetricRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMetricRepoMockRecorder
}

// MockMetricRepoMockRecorder is the mock recorder for MockMetricRepo.
type MockMetricRepoMockRecorder struct {
	mock *MockMetricRepo
}

// NewMockMetricRepo creates a new mock instance.
func NewMockMetricRepo(ctrl *gomock.Controller) *MockMetricRepo {
	mock := &MockMetricRepo{ctrl: ctrl}
	mock.recorder = &MockMetricRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricRepo) EXPECT() *MockMetricRepoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMetricRepo) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetricRepoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetricRepo)(nil).Close))
}

// DumpMetricsByInterval mocks base method.
func (m *MockMetricRepo) DumpMetricsByInterval(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpMetricsByInterval", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DumpMetricsByInterval indicates an expected call of DumpMetricsByInterval.
func (mr *MockMetricRepoMockRecorder) DumpMetricsByInterval(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpMetricsByInterval", reflect.TypeOf((*MockMetricRepo)(nil).DumpMetricsByInterval), ctx)
}

// GetAllMetrics mocks base method.
func (m *MockMetricRepo) GetAllMetrics(ctx context.Context) ([]models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", ctx)
	ret0, _ := ret[0].([]models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockMetricRepoMockRecorder) GetAllMetrics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockMetricRepo)(nil).GetAllMetrics), ctx)
}

// GetMetric mocks base method.
func (m *MockMetricRepo) GetMetric(ctx context.Context, metric models.Metrics) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", ctx, metric)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockMetricRepoMockRecorder) GetMetric(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockMetricRepo)(nil).GetMetric), ctx, metric)
}

// Ping mocks base method.
func (m *MockMetricRepo) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMetricRepoMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMetricRepo)(nil).Ping))
}

// UpdateMetrics mocks base method.
func (m *MockMetricRepo) UpdateMetrics(ctx context.Context, metrics []models.Metrics) ([]models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetrics", ctx, metrics)
	ret0, _ := ret[0].([]models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockMetricRepoMockRecorder) UpdateMetrics(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockMetricRepo)(nil).UpdateMetrics), ctx, metrics)
}
